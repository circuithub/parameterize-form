
(function(/*! Stitch !*/) {
  if (!this.require) {
    var modules = {}, cache = {}, require = function(name, root) {
      var path = expand(root, name), module = cache[path], fn;
      if (module) {
        return module.exports;
      } else if (fn = modules[path] || modules[path = expand(path, './index')]) {
        module = {id: path, exports: {}};
        try {
          cache[path] = module;
          fn(module.exports, function(name) {
            return require(name, dirname(path));
          }, module);
          return module.exports;
        } catch (err) {
          delete cache[path];
          throw err;
        }
      } else {
        throw 'module \'' + name + '\' not found';
      }
    }, expand = function(root, name) {
      var results = [], parts, part;
      if (/^\.\.?(\/|$)/.test(name)) {
        parts = [root, name].join('/').split('/');
      } else {
        parts = name.split('/');
      }
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part == '..') {
          results.pop();
        } else if (part != '.' && part != '') {
          results.push(part);
        }
      }
      return results.join('/');
    }, dirname = function(path) {
      return path.split('/').slice(0, -1).join('/');
    };
    this.require = function(name) {
      return require(name, '');
    }
    this.require.define = function(bundle) {
      for (var key in bundle) {
        modules[key] = bundle[key];
        var ext = key.split('.').pop();
        if (ext.indexOf('/') === -1 && ext.length < key.length)
          modules[key.slice(0,-ext.length - 1)] = bundle[key];
      }
    };
  }
  return this.require.define;
}).call(this)({"parameterize-form.js": function(exports, require, module) {// Generated by CoffeeScript 1.4.0
var escapeAttrib,
  __slice = [].slice;

(function(adt, html) {}, escapeAttrib = function(str) {
  return (String(str)).replace(/['"]/gi, "`");
}, module.exports = adt({
  section: function() {
    var children, heading;
    heading = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return html.section.apply(html, [{
      "class": 'param-section'
    }, html.h2({
      "class": 'param-header'
    }, String(heading))].concat(__slice.call(children)));
  },
  real: function(label, description, value) {
    return html.div({
      "class": 'param-real',
      title: escapeAttrib(description),
      'data-placement': 'right'
    }, html.label({
      "class": "param-label"
    }, String(label)), html.input({
      "class": "param-input"
    }));
  },
  option: function(label, description, options, defaultKey) {
    var k, keyValue, v;
    keyValue = {};
    options = (function() {
      var _i, _len, _results;
      if (Array.isArray(options)) {
        _results = [];
        for (_i = 0, _len = options.length; _i < _len; _i++) {
          k = options[_i];
          _results.push(keyValue[k] = k);
        }
        return _results;
      } else {
        return keyValue = options;
      }
    })();
    if (defaultKey == null) {
      defaultKey = (Object.keys(keyValue))[0];
    }
    return html.div({
      "class": 'param-real',
      title: escapeAttrib(description),
      'data-placement': 'right'
    }, html.label({
      "class": "param-label"
    }, String(label)), html.select.apply(html, [{
      "class": "param-select"
    }].concat(__slice.call((function() {
      var _results;
      _results = [];
      for (k in keyValue) {
        v = keyValue[k];
        _results.push(html.option({
          value: k,
          selected: (k === defaultKey ? true : void 0)
        }, v));
      }
      return _results;
    })()))));
  }
}))(typeof adt !== "undefined" && adt !== null ? adt : require('adt.js'), typeof html !== "undefined" && html !== null ? html : require('adt-html.js'));
}});
